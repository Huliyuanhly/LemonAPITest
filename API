当前接口框架有如下痛点：
1.所有的文件放在一个文件夹下，非常繁杂，极容易出错，当项目接口非常大时，那么整个项目维护成本高
2.程序的拓展性差
接口自动化测试框架基于如下设计理念
1.数据驱动（面试可能会问）
测试数据与测试执行逻辑（单元测试实例方法）分离
对某个接口测试，每条用例之间只是测试数据不同，而测试执行的执行逻辑往往一致，所以可以使用基于数据的驱动思想（ddt)来提升自动化测试效率
2.分层设计
为了提升接口自动化测试框架的拓展性，稳定性，完整性，进而提升测试效率，往往会将测试框架工程与整个测试流程分为不同的层级，每个层级之间保持相对独立
cases
测试执行逻辑层，用于存放所有的测试用例类
configs
配置曾，用于存放当前框架中的所有配置信息（使用频繁，修改不频繁的数据）
datas
测试数据层，用于存放所有的测试数据，测试参数（可以使用excel,json,yaml,数据库来存储）
libs
自定义库文件层，用于存放自定义或者二次开发的库文件
logs
日志层，用于保存运行框架过程中产生的所有有效日志信息
reports
报告层，用于保存所有的测试报告文件（一般为HTML报告）
scripts
脚本封装层，用于保存所有的操作封装模块（yaml,excel,log,mysql,requests,参数化等）
run.py
用例启动文件，使用套件加载用例，批量执行并生成报告
